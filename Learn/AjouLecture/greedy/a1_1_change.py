'''
<그리디1>
거스름돈 - 그리디 알고리즘의 대표문제

# 당신은 음점의 계산을 도와주는 점원이다. 
카운터에는 거스름돈으로 사용할 500원, 100원, 50원, 10원 짜리 동전이 무한히 존재한다고 가정한다.

손님에게 거슬러줘야할 돈이 N원일 때, 거슬러줘야 할 동전의 최소 개수를 구하라.
단, 거슬러 줘야 할 돈 N은 항상 10의 배수이다.

'''

def change() :
    cnt = 0
    coin_types = [500,100,50,10] # 큰단위의 화폐부터 차례로 확인
    
    n = int(input('최소 10단위의 거스름돈을 입력하세요: '))
    
    for c in coin_types :
        cnt += n // c
        n =  n % c
    return cnt

print(change()) 

'''
#시간복잡도 : O(N) : 상수형

    이 알고리즘의 시간 복잡도는 동전의 '총 종류 수: len(coin_types)' 에만 영향을 받고, 거슬러 줘야하는 금액의 크기(n) 와는 무관하다.
''' 

'''
# 정당성 :

    해당 문제에 대한 그리디 알고리즘의 정당성은,
    
    "가지고 있는 동전 중에서, 보다 큰 동전단위가 항상 작은 동전단위의 배수이므로, 작은 단위의 동전들을 종합하는 방법으로는 다른 최적해가 나올 수 없다"
    
    는 이유로 부여된다.
    
    이처럼 그리디 알고리즘은, '가장 큰 화폐단위부터' 와 같이 '탐욕적으로 문제에 접근했을 때, 정확한 답을 찾을 수 있다는 보장이 있을 때 매우 효과적이고 직관적인 답을 만들 수 있으며
    대부분의 그리디 알고리즘 문제는 이처럼 문제 풀이를 위한 최소한의 아이디어를 떠올리고, 이것이 정당한지 검토할 수 있어야 답을 만들어낼 수 있다.
'''

   